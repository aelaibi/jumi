
TODO NEXT:
- write user documentation for jumi-actors
	OK - example: hello world (put on front page)
	OK - example: pi (put in wiki), adapted from http://doc.akka.io/docs/akka/2.0.2/intro/getting-started-first-java.html
	OK - write better javadocs for the published API
	!! - check that maven central was synced
	- release the latest jumi-actors
		- add automatic tagging to pipeline?
	- user guide: also intro to thread-safety-checker and jumi-actors-maven-plugin
	- www: maven dependency xml, latest version number, link to http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22fi.jumi%22
	- advertise the release
	- write a blog post: Continuous Delivery with Maven and Go into Maven Central

- web site improvements
	- javadocs for jumi-actors
	- site for jumi-actors-maven-plugin
		http://www.vineetmanohar.com/2009/04/how-to-auto-generate-maven-plugin-documentation/
		http://stackoverflow.com/questions/2912665/maven-plugin-site
		http://maven.apache.org/guides/mini/guide-site.html
	- aggregated javadoc of all modules?
		http://maven.apache.org/plugins/maven-javadoc-plugin/aggregate-mojo.html

- investigate sporadic timeouts in RunningTestsTest
	OK - improve the logging: now does not show messages that SuiteRunner sends to clients
	OK - consider implemeting proper daemon shutdown sooner
	... - keep an eye on what happens

!! - proper configuration parameters
	OK - parse args
		OK - read port number
		OK - require port number
		OK - launcher must be in sync
			OK - make launcher testable
				OK - starting processes
				OK - listening for connections
			OK - test that Configuration gets the right value
	OK - use the parser in Main
	- parse system properties
		- read values
		- default values
		- launcher must be in sync

- proper daemon shutdown
	- expose the Process instance from launcher, use it to write e2e-tests
	- send shutdown command from launcher after receiving the last suite event
	- exit after a timeout if no client connects to daemon or the client disconnects
	- remove the hack in fi.jumi.daemon.Main#exitWhenNotAnymoreInUse
	- print a message on daemon startup and shutdown; makes it easier to see from logs that when the JVM was restarted

- end-to-end tests: running multiple test classes
	- it's not sure whether SuiteRunner works correctly when there are many test classes
	- test class inclusion patterns (*Test, Test*, some.package.*, some.package.** etc.)

- end-to-end tests: reporting test output
	- capture System.out/err
	- send out/err events
	- test: printing from the same thread to out & err should be synchronous, unlike in probably every IDE
	- hacking System.out/err
		- tests should restore the original out/err defensively in @After
		- concurrency test: out.println("O") and err.println("E") from different threads, output must not contain "OE"/"EO" but only "O\nE\n"
		- unit test: the PrintStreams for our & err must sync on the same object, testable by checking holdsLock in a mock OutputStream
			- Thread.holdsLock(java.lang.Object)
			- ReentrantLock.isHeldByCurrentThread()
		- generic test: all methods on our custom PrintStream must delegate to the PrintStream given as parameter, testable with reflection and CGLIB-proxy as target mock
			- note: can't override just selected methods, because the print's delegate to a private method, and anyways it would couple to PrintStream's implementation details
			- might break in future Java versions, if more methods are added to PrintStream, so beware of it
			! - or just use a CGLIB proxy (net.sf.cglib.proxy.MethodInterceptor which synchronizes and delegates to real PrintStream, except net.sf.cglib.proxy.NoOp for Object's methods)

- SuiteListener#onFailure cannot rely on the exception class from existing in the caller's class loader
	- introduce ExceptionSafetyGloves?
		- implementable as an exception with custom toString and that copies the StackTraceElements
		- provide getExceptionClassName: String
	- test: same toString as the original exception
	- test: same StackTraceElements
	- test: same toString & StackTraceElements also for cause
	- test: same output of printStackTrace

- end-to-end tests: failures outside tests (in drivers and core)
	OK - actor tests print dummy exceptions; solve by having a custom pluggable exception handler which doesn't print stack traces of a DummyException class
	OK - consider a command for stopping actors (Thread.interrupt(), DeathPill)
	- consider a supervisor pattern for actors (like in Akka)
	- maybe testable by throwing exceptions from a driver or by producing non-valid .class files

- misc refactoring
	- fix Maven's pomPropertiesFile element, get rid of the current workaround of a separate build.properties
		http://jira.codehaus.org/browse/MSHARED-154
		http://stackoverflow.com/questions/10102818/custom-values-in-maven-pom-properties-file
		<archive> element: http://maven.apache.org/plugins/maven-jar-plugin/jar-mojo.html
		<pomPropertiesFile> element: http://maven.apache.org/shared/maven-archiver/index.html
	- improve JUnit's test timeouts to show a stack trace of the timed out test, to help debugging sporadic timeouts in RunningTestsTest
	- unit tests for fi.jumi.core.results
	- combine DuplicateOnTestFoundEventFilter and SuiteListenerAdapter, rename to SuiteEventNormalizer/RunEventNormalizer
	- there might be unnecessary eventizers in fi.jumi.daemon.Main and /jumi-core/pom.xml
		- create EventizerUsageStatistics (extends EventizerProvider), print usage statistics when program exits
	- logging actor messages could benefit from seeing that from which actor a messages was sent; a trace of intermediate actors
	- refactor SimpleUnit
		- simplity the tests by creating helper which runs using SuiteRunner, collects the results and provides assert methods
		- move to its own module, simpleunit
	- migrate Specsy to use Jumi (need the above test helper first)
	- packages by functionality
		core
			discovery
			drivers
			suite
			classes
			runs
	FAIL - try using FEST asserts in BuildTest, it should help with generics
	- BuildTest: try creating a non-generic assertThat method
	- kill daemon before removing temp files: fi.jumi.test.AppRunner#tearDown
	- SuiteRunner has a cyclic dependency with TestRunCoordinator
	- organize the project so that it's possible to run unit tests separate from end-to-end tests
		- put end-to-end tests in their own package, test.fi.jumi?
		- or use JUnit categories, maybe with a custom runner?
		- or use ClasspathSuite?
	- test execution might be best implemented using regular thread pools instead of actors
		- CPU bound threads should use an optimal number of threads per core
		- they take no input when running, so no actor handle needs to be created for them
		OK - the thing which coordinates a test class's workers might need to be an actor (it receives events from the tests), but it should also be able to exit itself when it has done its work
	- bullet proofing the public api, cross-references from javadocs to tests (a new xref tag?)
		- testId in onTestFinished must be correspond last onTestStarted, correctly nested
		- testId in onFailure must equal the currently running test
		- disallow TestNotifier.fireFailure and fireTestFinished after test is finished
		- log all incorrect usages to some internal log and make the suite fail?
		- TestClassListener: consider eliminating redundant parameters
	- evaluate JarJar or ProGuard, maybe it could minimize the jars better than the shade plugin by removing also unused methods
		http://sonatype.github.com/jarjar-maven-plugin/
		http://pyx4me.com/pyx4me-maven-plugins/proguard-maven-plugin/
	- seems that Eventizer.newBackend is not used; keep it for symmetry or remove it?
	- consider logging with http://code.google.com/p/minlog/

- improving TextUI
	OK - spacing between test runs (empty line or horizontal bar?)
	- option for showing all test runs or only failing
	(- if multiple readers are needed: Streamer class for receiving events from UI thread)
	- different colors for out (default), err (red), metadata e.g. test names (blue), binary output (yellow BG)?
		- JCons (uses JNI on Windows, so maybe support only Unix)
			http://jcons.sourceforge.net/
			http://sourceforge.net/projects/jcons/
		- could also JLine do it? (uses a native binary)
			http://jline.sourceforge.net/
			https://github.com/jline
		- misc links
			http://www.codeguru.com/forum/showthread.php?t=504096
			http://blogs.atlassian.com/2009/10/colour_your_console_ansicolor/
			http://en.wikipedia.org/wiki/ANSI_escape_code
			http://www.velocityreviews.com/forums/t143949-text-color-in-windows-console.html
			http://academic.evergreen.edu/projects/biophysics/technotes/program/ansi_esc.htm
			http://www.tldp.org/LDP/abs/html/colorizing.html
			http://stackoverflow.com/questions/7445658/how-to-detect-if-the-console-does-support-ansi-escape-codes-in-python
		- ANSI escape codes work in IDEA?
			http://youtrack.jetbrains.net/issue/IDEA-68679

- end-to-end tests: persistent daemon process
	- should drive better design on launcher side
	- connect to existing process
	- if daemon dies unexpectedly (System.exit/halt, JVM crash etc.), report it and restart next time
		http://vanillajava.blogspot.com/2011/12/test-complete-failure-of-jvm.html
	- make it reliable

- refactor jumi-actors-maven-plugin
	- DummyListenerToEvent: rename sender to target
	- EventToDummyListener: rename listener to target
	- switch to using Eclipse JDT DOM for code generation, create an internal DSL as necessary (factory methods to avoid setter hell)
		http://blog.cedarsoft.com/2010/08/code-generation-done-right/
		http://www.eclipse.org/jdt/core/index.php
		http://help.eclipse.org/indigo/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/dom/package-summary.html
		- walking skeleton
			1. take the old generator's output
			2. parse it to AST
				example: http://help.eclipse.org/indigo/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/dom/AST.html
				http://help.eclipse.org/indigo/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/dom/ASTParser.html
			3. convert AST to string
				example: http://help.eclipse.org/indigo/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/dom/AST.html
				http://help.eclipse.org/indigo/topic/org.eclipse.platform.doc.isv/reference/api/org/eclipse/jface/text/Document.html
				http://help.eclipse.org/indigo/topic/org.eclipse.platform.doc.isv/reference/api/org/eclipse/jface/text/IDocument.html#get()
			4. format using Eclipse Formatter
				http://help.eclipse.org/indigo/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/ToolFactory.html#createCodeFormatter
				http://help.eclipse.org/indigo/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/formatter/package-summary.html
				http://www.eclipse.org/jdt/core/codecoverage/B01/org.eclipse.jdt.core/org.eclipse.jdt.core.formatter/CodeFormatterApplication.java.html#L204
			5. use the Organize Imports operation, unless formatter already adds imports
				? http://help.eclipse.org/indigo/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/ui/actions/OrganizeImportsAction.html
				? http://plugins.intellij.net/plugin/?idea&id=6546
				http://stackoverflow.com/questions/2644440/simplifying-fully-qualified-names-in-eclipse
				- might need to transform the AST ourselves?
		- migrate to generating code with JDT AST
			- generate code with fully qualified names, rely on the formatter for imports
			- migrate to AST one method at a time, if possible
				- try using AST.newMethodDeclaration or AST.newBlock instead of AST.newCompilationUnit
			- delete the old code generator
	- @Generated annotation, example: @Generated(value = "fi.jumi.codegenerator.EventStubGenerator", comments = "Generated based on fi.jumi.codegenerator.DummyListener", date = "2000-01-01")
	- @Override annotation to all methods
	- annotation to suppress unchecked warnings due to type erasure?
	- toString?
	- hand-written serialization using bare DataOutput/DataInput? should give overall best performance without additional dependencies: https://github.com/eishay/jvm-serializers/wiki/
	- plugin pom: add-source with http://mojo.codehaus.org/build-helper-maven-plugin/
	- install plugin to local repository to avoid false alarms in jumi-core pom

- deployment pipeline
	jumi:
		build
			build-release
		analyze
			coverage-report
	jumi-integration:
		test
			integration-test
	jumi-publish:
		publish [M]
			promote-staging
			smoke-test
			promote-central
			create-tags
			prepare-changelog
		announce [M]
			publish-changelog
			send-emails
	- enable deployment for all except end-to-end tests and the aggregate pom: jumi-api, jumi-core, jumi-daemon, jumi-launcher
	- create jumi-integration and add it to the pipeline
		- integration tests for Specsy
		- platform for running the tests
		- run an untrusted go-agent in a restricted environment
		- add it to the pipeline
	- push-button releasing the staging repository
		- create signed tags automatically and push them to github
		- run smoke tests before promoting
		- if smoke tests pass, promote automatically from OSSRH to Central
			http://www.sonatype.com/books/nexus-book/reference/staging-sect-managing-plugin.html
			https://repository.sonatype.org/content/sites/maven-sites/nexus-maven-plugin/
	- update the version number of latest release to the web site
	- update javadocs to the web site

- write performance tests
	- test: suite with a hundred test classes, each with a hundred tests, some of which also do printing; measure total time of running the suite
	- experiment with different queue implementations, for example ConcurrentLinkedQueue
	- try following the single writer principle: http://mechanical-sympathy.blogspot.com/2011/09/single-writer-principle.html
		- for example: separate queue for each test worker (implies parallelism = locally sequential, except for slow tests?, use a work stealing executor?) and one thread which loops through them and writes to the coordinator actor queue

- "Error creating shaded jar", probably an issue with NTFS's pending delete and the shade plugin
	- make a bug request, maybe also a patch
	http://mail-archives.apache.org/mod_mbox/maven-dev/200808.mbox/%3C835d522e0808281121g47eedd04u3c056998569be860@mail.gmail.com%3E

- investigate warnings on build:
	- happens when jumi-core-0.1.0-SNAPSHOT.jar (or daemon JAR) exists from the previous build
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TailerListener.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TailerListenerAdapter.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TeeInputStream.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/XmlStreamReader.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar

- Pronouncing Jumi: ['jumi]
	http://en.wikipedia.org/wiki/International_Phonetic_Alphabet
