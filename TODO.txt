
TODO NEXT:
- refactor jumi-actors
	OK - rename package to fi.jumi.actors.maven
	OK - rename factories to Eventizer (also generated)
	OK? - make it impossible to use actors wrong
		OK - ActorRef (might make spawners and auto wrapping unnecessary!)
			OK - return ActorRef from creation methods instead of the proxy
			OK - in all constructors and fields, use ActorRef instead of proxy to make it easier to keep track of the communication patterns
			OK - use ActorRef in callbacks (WorkerCounter, unattended workers, other method parameters if any)
		SKIP - wrap all NonThreadSafe collaborators of a worker automatically into a secondary actor.
			Usage:
			        Spawner<DriverRunnerFactory> driverRunnerSpawner = new Spawner<DriverRunnerFactory>(DriverRunnerFactory.class, new BareDriverRunnerFactory());
			        // ...
			        driverRunnerSpawner
			                .whenFinished(new OnWorkerFinished())
			                .create(testClass, driverClass, listener /*NOT thread-safe*/, executor /*thread-safe*/);
			Boilerplate:
				interface DriverRunnerFactory {
				    DriverRunner create(Class<?> testClass, Class<? extends Driver> driverClass, TestClassListener listener, Executor executor);
				}
				class BareDriverRunnerFactory implements DriverRunnerFactory {
				    @Override
				    public DriverRunner create(Class<?> testClass, Class<? extends Driver> driverClass, TestClassListener listener, Executor executor) {
				        return new DriverRunner(testClass, driverClass, new DefaultSuiteNotifier(listener), executor);
				    }
				}
		SKIP - use OnDemandActors only in classes whose responsibility is to start actors; current users:
			- fi.jumi.core.runners.DriverRunnerSpawner
				- now too complex
			- fi.jumi.core.runners.TestRunSpawner
				- now too complex
			- fi.jumi.core.runners.SuiteRunner & fi.jumi.core.TestRunCoordinator
				- extract TestClassFinderSpawner
			- fi.jumi.core.runners.TestClassRunner
				- push dependencies out of constructor (pass WorkerCounter and `this` as method parameters to DriverRunnerSpawner)
	OK - create a class (Actor?) to represent Actors.queueOfCurrentActor
		OK - wrap the MessageQueue in it
		OK - move processing the next message in it
		OK - move wiring the MessageQueue in it
			OK - from createPrimaryActor
			SKIP - from createSecondaryActor
	OK - make all events of type CustomTargetEvent (or would it complicate custom prosessing the messages? do we need to use MessageQueue<MessageToActor> for direct messages, and MessageQueue<Event<T>> for networking and stuff?)
		OK - make primary actors use CustomTargetEvent
		OK - remove duplication: unify the message processing/sending of primary and secondary actors
			OK - unify SingleThreadedActors.EventPoller and Actors.ActorContext
			OK - maybe doable by setting up the context for every message also in MultiThreadedActors, or get rid of the need for more than one context in SingleThreadedActors
	OK - separate creating ActorRefs from assigning threads. Might allow creating ActorRefs/secondary actors in constuctors, outside actor thread.
		OK - estimate whether it would make code simpler and/or help to get rid of spawners
		OK - create interface ActorThread.createActor(Object): ActorRef
		OK - create Actors.newThread(): ActorThread
		OK - refactor the code to use it (at first probably only Main creates the thread)
		OK - rename/remove fi.jumi.actors.LongLivedActors
	SKIP - create Actors.getCurrentActor: ActorRef (or maybe it's not needed when creating refs and threads are separated?)
		- implement using the thread-local actor context
		- use it instead of createSecondaryActor(this)
	OK - either, decouple unattended workers from Actors
		OK - hide WorkerCounter, create a wrapper: new MonitoredExecutor(realExecutor, onAllFinishedCallback)
			OK - thred safe, counts commands with AtomicInteger
			SKIP - executes the callback using realExecutor, as its own command
		SKIP - create a MonitoredExecutorSpawner which executes the callback in the current actor thread
		OK - make it work for commands which launch other commands (when backed by an asynchronous executor)
		OK - test: a single command
		OK - use BlockingQueue in tests instead of latches where possible
			OK - extract fi.jumi.actors.ActorsContractHelpers#events to EventSpy
		OK - use MonitoredExecutor instead of Actors.startUnattendedWorker (keep SingleThreadedActors.getExecutor)
		OK - remove Actors.startUnattendedWorker
		OK - try removing fi.jumi.core.runners.TestClassRunnerListener#onTestClassFinished
		OK - try removing fi.jumi.core.runners.WorkerCounter, replace with the new MonitoredExecutor
		OK - rename/remove fi.jumi.actors.OnDemandActors
	SKIP - or, implement unattended workers as actors which stop themselves (Thread.interrupt()) after running the command
	OK - eliminate spawners
	OK - refactor actor tests
		OK - some tests might be outdated; update or remove them
		OK - rename any remaining "factories" variables and methods to "eventizers"
	!! - make DynamicListenerFactory support all types without having to declare them
		OK - move the type comparison in Actors.getFactoryForType to ListenerFactory.supportsType
		SKIP - need to give type as parameter to DynamicListenerFactory.newFrontend/newBackend?
		OK - refactor tests to use just one DynamicListenerFactory, use generated factories only in Main
		OK - make Actors(EventizerLocator) the only constructor, to make the design clearer, reduce code and avoid mistaking DynamicEventizer for DynamicEventizerLocator
		OK - rename EventizerLocator to EventizerProvider?
		OK - ComposedEventizerLocator: move the last test from ActorsContract to ComposedEventizerLocatorTest
		OK - ComposedEventizerLocator: use a HashMap
		- DynamicEventizer: check that the parameter is an interface (write tests)
		- DynamicEventizerLocator: cache the eventizers to avoid re-checking the same types, or premature?
			- write a benchmark first: http://code.google.com/p/caliper/
				- micro-benchmark creating a single actor
				- create lots of short-lived actors and send to each of them only one message
	SKIP - consider creating NakedActorRef for unit testing, ProxyActorRef for production
		- throw an exception in fi.jumi.actors.ActorRef#wrap if not a proxy (see TODO), or is it even possible because of not always using dynamic proxies?
	- remove support for named actor threads
		- remove name parameter from startActorThread
		- MultiThreadedActors: don't create threads manually
			- use thread pool
			- remove the constructor which creates a default thread pool; the caller shall manage its lifecycle
			- remove shutdown method (use ExecutorService.shutdownNow/awaitTermination directly in tests)
		- create PrefixedThreadFactory, e.g. "foo-" -> "foo-1", "foo-2" etc.
		- use it in Main, prefixes: "jumi-actors-", "jumi-tests-"
	- pluggable logger
		- create interface MessageLogger, class NullMessageLogger
		- replace logging in MessageQueue with it
		- create class SimpleMessageLogger to core tests, use in SuiteRunnerIntegrationHelper
		- write a test for the information shown in Actors.MessageToActor.toString()
	- support for stopping actors?
		- create ActorThread.stop()
		- create ActorThread.isAlive()
		- SingleThreadedActors: unifying actors and the Executor
			- implement commands as actors which are stopped immediately after executing them?
			- have only one actor thread? might not be possible when supporting stopping?
		- consider removing fi.jumi.actors.Actors#currentActorThread because now resources can be released
	- handle exceptions from actors (in general, not just in single-threaded actors)
		- use UncaughtExceptionCollector in ActorsContract
	- write user documentation for jumi-actors

- end-to-end tests: running multiple test classes
	- it's not sure whether SuiteRunner works correctly when there are many test classes
	- test class inclusion patterns (*Test, Test*, some.package.*, some.package.** etc.)

- end-to-end tests: reporting test output
	- capture System.out/err
	- send out/err events
	- test: printing from the same thread to out & err should be synchronous, unlike in probably every IDE
	- hacking System.out/err
		- tests should restore the original out/err defensively in @After
		- concurrency test: out.println("O") and err.println("E") from different threads, output must not contain "OE"/"EO" but only "O\nE\n"
		- unit test: the PrintStreams for our & err must sync on the same object, testable by checking holdsLock in a mock OutputStream
			- Thread.holdsLock(java.lang.Object)
			- ReentrantLock.isHeldByCurrentThread()
		- generic test: all methods on our custom PrintStream must delegate to the PrintStream given as parameter, testable with reflection and CGLIB-proxy as target mock
			- note: can't override just selected methods, because the print's delegate to a private method, and anyways it would couple to PrintStream's implementation details
			- might break in future Java versions, if more methods are added to PrintStream, so beware of it
			! - or just use a CGLIB proxy (net.sf.cglib.proxy.MethodInterceptor which synchronizes and delegates to real PrintStream, except net.sf.cglib.proxy.NoOp for Object's methods)

- end-to-end tests: failures outside tests (in drivers and core)
	- actor tests print dummy exceptions; solve by having a custom pluggable exception handler which doesn't print stack traces of a DummyException class
	- consider a supervisor pattern for actors (like in Akka)
	- consider a command for stopping actors (Thread.interrupt(), DeathPill)

- deployment pipeline
	- install Go
	- configure CI build
	- generate unique version number for each build
	- automatic deployment to staging
	- approved deployment to Maven Central

- misc refactoring
	- unit tests for fi.jumi.core.results
	- combine DuplicateOnTestFoundEventFilter and SuiteListenerAdapter, rename to SuiteEventNormalizer/RunEventNormalizer
	- logging actor messages could benefit from seeing that from which actor a messages was sent; a trace of intermediate actors
	- refactor SimpleUnit
		- simplity the tests by creating helper which runs using SuiteRunner, collects the results and provides assert methods
		- move to its own module, simpleunit
	- migrate Specsy to use Jumi (need the above test helper first)
	- packages by functionality
		core
			discovery
			drivers
			suite
			classes
			runs
	- try using FEST asserts in BuildTest, it should help with generics
	- kill daemon before removing temp files: fi.jumi.test.AppRunner#tearDown
	- SuiteRunner has a cyclic dependency with TestRunCoordinator
	- put end-to-end tests in their own package (test.fi.jumi?), separate them from unit tests
		- or use JUnit categories, maybe with a custom runner?
	- test execution might be best implemented using regular thread pools instead of actors
		- CPU bound threads should use an optimal number of threads per core
		- they take no input when running, so no actor handle needs to be created for them
		OK - the thing which coordinates a test class's workers might need to be an actor (it receives events from the tests), but it should also be able to exit itself when it has done its work
	- bullet proofing the public api, cross-references from javadocs to tests (a new xref tag?)
		- testId in onTestFinished must be correspond last onTestStarted, correctly nested
		- testId in onFailure must equal the currently running test
		- disallow TestNotifier.fireFailure and fireTestFinished after test is finished
		- log all incorrect usages to some internal log and make the suite fail?
		- TestClassListener: consider eliminating redundant parameters
	- duplicate method signatures in TestClassListener and TestClassRunnerListener
	- should SuiteRunner or TestClassRunner be responsible for filtering duplicate onTestFound events?
	- evaluate JarJar or ProGuard, maybe it could minimize the jars better than the shade plugin by removing also unused methods
		http://sonatype.github.com/jarjar-maven-plugin/
		http://pyx4me.com/pyx4me-maven-plugins/proguard-maven-plugin/
	- seems that Eventizer.newBackend is not used; keep it for symmetry or remove it?

- improving TextUI
	OK - spacing between test runs (empty line or horizontal bar?)
	- option for showing all test runs or only failing
	(- if multiple readers are needed: Streamer class for receiving events from UI thread)
	- different colors for out (default), err (red), metadata e.g. test names (blue), binary output (yellow BG)?
		- JCons (uses JNI on Windows, so maybe support only Unix)
			http://jcons.sourceforge.net/
			http://sourceforge.net/projects/jcons/
		- could also JLine do it? (uses a native binary)
			http://jline.sourceforge.net/
			https://github.com/jline
		- misc links
			http://www.codeguru.com/forum/showthread.php?t=504096
			http://blogs.atlassian.com/2009/10/colour_your_console_ansicolor/
			http://en.wikipedia.org/wiki/ANSI_escape_code
			http://www.velocityreviews.com/forums/t143949-text-color-in-windows-console.html
			http://academic.evergreen.edu/projects/biophysics/technotes/program/ansi_esc.htm
			http://www.tldp.org/LDP/abs/html/colorizing.html
			http://stackoverflow.com/questions/7445658/how-to-detect-if-the-console-does-support-ansi-escape-codes-in-python
		- ANSI escape codes work in IDEA?
			http://youtrack.jetbrains.net/issue/IDEA-68679

- end-to-end tests: persistent daemon process
	- should drive better design on launcher side
	- connect to existing process
	- if daemon dies unexpectedly (System.exit/halt, JVM crash etc.), report it and restart next time
		http://vanillajava.blogspot.com/2011/12/test-complete-failure-of-jvm.html
	- make it reliable

- refactor jumi-actors-maven-plugin
	- DummyListenerToEvent: rename sender to target
	- EventToDummyListener: rename listener to target
	- @Generated annotation, example: @Generated(value = "fi.jumi.codegenerator.EventStubGenerator", comments = "Generated based on fi.jumi.codegenerator.DummyListener", date = "2000-01-01")
	- @Override annotation to all methods
	- annotation to suppress unchecked warnings due to type erasure?
	- toString?
	- Externalizable? should give overall best performance without additional dependencies: https://github.com/eishay/jvm-serializers/wiki/
	- plugin pom: add-source with http://mojo.codehaus.org/build-helper-maven-plugin/
	- install plugin to local repository to avoid false alarms in jumi-core pom

- organize the project so that it's possible to run unit tests separate from end-to-end tests
	- maybe using ClasspathSuite?

- write performance tests
	- test: suite with a hundred test classes, each with a hundred tests, some of which also do printing; measure total time of running the suite
	- experiment with different queue implementations, for example ConcurrentLinkedQueue
	- try following the single writer principle: http://mechanical-sympathy.blogspot.com/2011/09/single-writer-principle.html
		- for example: separate queue for each test worker (implies parallelism = locally sequential, except for slow tests?, use a work stealing executor?) and one thread which loops through them and writes to the coordinator actor queue

- "Error creating shaded jar", probably an issue with NTFS's pending delete and the shade plugin
	- make a bug request, maybe also a patch
	http://mail-archives.apache.org/mod_mbox/maven-dev/200808.mbox/%3C835d522e0808281121g47eedd04u3c056998569be860@mail.gmail.com%3E

- investigate warnings on build:
	- happens when jumi-core-0.1.0-SNAPSHOT.jar (or daemon JAR) exists from the previous build
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TailerListener.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TailerListenerAdapter.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TeeInputStream.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/XmlStreamReader.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar

- Pronouncing Jumi: ['jumi]
	http://en.wikipedia.org/wiki/International_Phonetic_Alphabet
