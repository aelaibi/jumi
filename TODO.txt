
TODO NEXT:
- end-to-end tests: multiple tests
	OK - run on more than one thread; performance must improve (write a performance test with sleeps?)
		OK - testable with a static CountDownLatch used from two test methods
	OK - make it pass
		OK - SuiteRunner fires onSuiteFinished to early, because fi.jumi.core.runners.SuiteRunner.TestClassRunnerListenerToSuiteListener#onTestClassFinished is called too early (right after the tests are found and test runs started *asynchronously*)
			OK - fix TestClassRunner
				OK - wrap Executor, count workers
				OK - add assertions to fi.jumi.core.runners.TestClassRunnerTest#test_class_with_multiple_tests_which_are_run_in_parallel
				OK - see if SuiteRunner works now correctly
	OK - clean up TestClassRunner
		OK - extract WorkerCounter 
		OK - extract DriverRunnerSpawner
		OK - extract TestRunSpawner from DriverRunnerSpawner
	OK - merge AsynchronousExecutor with SingleThreadedActors?
	OK - clean up fi.jumi.actors.SingleThreadedActors#processEventsUntilIdle
	SKIP - give AppRunner a copy of all events, so that it can assert directly instead of parsing the output?
	!! - or then parse the text output; some regexp for getting the list of started/ended tests?
		OK - extract SuiteBuilder, SuiteMother
		!! - tests for TextUIParser (write against TextUI, don't mock its output)
			OK - test counts
			OK - test names (start and end events)
			OK - nested test names
			- many runs
				OK - ban junit:junit
					http://maven.apache.org/enforcer/enforcer-rules/bannedDependencies.html
				!! - update EventBuilder to generate runIds
				- RunId class to eliminate primitive obsession
				- make TextUI support multiple runs
				- make TextUIParser support multiple runs
		- change AppRunner to delegate to TextUIParser
	- identify concurrent test runs with a unique ID (necessary yet?)
		- improve e2e test to check test start/end events, or test runs
		- update fi.jumi.core.runners.SuiteRunner.TestClassRunnerListenerToSuiteListener to use real runId
		- add onRunStarted, onRunFinished to SuiteListener
	- remove redundant parameters for SuiteListener
		- testClass can be deduced from onRunStarted's RunId
		- TestId of onTestFinished & onFailure can be deduced from last call to onTestStarted (also prevents faulty input)

- end-to-end tests: running multiple test classes
	- it's not sure whether SuiteRunner works correctly whene there are many test classes

- end-to-end tests: reporting test output
	- capture System.out/err
	- send out/err events
	- test: printing from the same thread to out & err should be synchronous, unlike in probably every IDE
	- hacking System.out/err
		- tests should restore the original out/err defensively in @After
		- concurrency test: out.println("O") and err.println("E") from different threads, output must not contain "OE"/"EO" but only "O\nE\n"
		- unit test: the PrintStreams for our & err must sync on the same object, testable by checking holdsLock in a mock OutputStream
			- Thread.holdsLock(java.lang.Object)
			- ReentrantLock.isHeldByCurrentThread()
		- generic test: all methods on our custom PrintStream must delegate to the PrintStream given as parameter, testable with reflection and CGLIB-proxy as target mock
			- note: can't override just selected methods, because the print's delegate to a private method, and anyways it would couple to PrintStream's implementation details
			- might break in future Java versions, if more methods are added to PrintStream, so beware of it
			! - or just use a CGLIB proxy (net.sf.cglib.proxy.MethodInterceptor which synchronizes and delegates to real PrintStream, except net.sf.cglib.proxy.NoOp for Object's methods)

- end-to-end tests: failures outside tests (in drivers and core)
	- actor tests print dummy exceptions; solve by having a custom pluggable exception handler which doesn't print stack traces of a DummyException class

- misc refactoring
	- make it impossible to use actors wrong
		- wrap all NonThreadSafe collaborators of a worker automatically into a secondary actor.
			Usage:
			        Spawner<DriverRunnerFactory> driverRunnerSpawner = new Spawner<DriverRunnerFactory>(DriverRunnerFactory.class, new BareDriverRunnerFactory());
			        // ...
			        driverRunnerSpawner
			                .whenFinished(new OnWorkerFinished())
			                .create(testClass, driverClass, listener /*NOT thread-safe*/, executor /*thread-safe*/);
			Boilerplate:
				interface DriverRunnerFactory {
				    DriverRunner create(Class<?> testClass, Class<? extends Driver> driverClass, TestClassListener listener, Executor executor);
				}
				class BareDriverRunnerFactory implements DriverRunnerFactory {
				    @Override
				    public DriverRunner create(Class<?> testClass, Class<? extends Driver> driverClass, TestClassListener listener, Executor executor) {
				        return new DriverRunner(testClass, driverClass, new DefaultSuiteNotifier(listener), executor);
				    }
				}
		- use OnDemandActors only in classes whose responsibility is to start actors; current users:
			- fi.jumi.core.runners.DriverRunnerSpawner
				- now too complex
			- fi.jumi.core.runners.TestRunSpawner
				- now too complex
			- fi.jumi.core.runners.SuiteRunner & fi.jumi.core.TestRunCoordinator
				- extract TestClassFinderSpawner
			- fi.jumi.core.runners.TestClassRunner
				- push dependencies out of constructor (pass WorkerCounter and `this` as method parameters to DriverRunnerSpawner)
	- SuiteRunner has a cyclic dependency with TestRunCoordinator
	- put end-to-end tests in their own package (test.fi.jumi?), separate them from unit tests
		- or use JUnit categories, maybe with a custom runner?
	- test execution might be best implemented using regular thread pools instead of actors
		- CPU bound threads should use an optimal number of threads per core
		- they take no input when running, so no actor handle needs to be created for them
		OK - the thing which coordinates a test class's workers might need to be an actor (it receives events from the tests), but it should also be able to exit itself when it has done its work
	- bullet proofing the public api, cross-references from javadocs to tests (a new xref tag?)
	- duplicate method signatures in TestClassListener and TestClassRunnerListener
	- should SuiteRunner or TestClassRunner be responsible for filtering duplicate onTestFound events?
	- evaluate JarJar or ProGuard, maybe it could minimize the jars better than the shade plugin by removing also unused methods
		http://sonatype.github.com/jarjar-maven-plugin/
		http://pyx4me.com/pyx4me-maven-plugins/proguard-maven-plugin/

- improving TextUI
	- spacing between test runs (empty line or horizontal bar?)
	- option for showing all test runs or only failing
	(- if multiple readers are needed: Streamer class for receiving events from UI thread)
	- different colors for out (default), err (red), metadata e.g. test names (blue), binary output (yellow BG)?
		- JCons (uses JNI on Windows, so maybe support only Unix)
			http://jcons.sourceforge.net/
			http://sourceforge.net/projects/jcons/
		- could also JLine do it? (uses a native binary)
			http://jline.sourceforge.net/
			https://github.com/jline
		- misc links
			http://www.codeguru.com/forum/showthread.php?t=504096
			http://blogs.atlassian.com/2009/10/colour_your_console_ansicolor/
			http://en.wikipedia.org/wiki/ANSI_escape_code
			http://www.velocityreviews.com/forums/t143949-text-color-in-windows-console.html
			http://academic.evergreen.edu/projects/biophysics/technotes/program/ansi_esc.htm
			http://www.tldp.org/LDP/abs/html/colorizing.html
			http://stackoverflow.com/questions/7445658/how-to-detect-if-the-console-does-support-ansi-escape-codes-in-python
		- ANSI escape codes work in IDEA?
			http://youtrack.jetbrains.net/issue/IDEA-68679

- end-to-end tests: persistent daemon process
	- should drive better design on launcher side
	- connect to existing process
	- if daemon dies unexpectedly (System.exit/halt, JVM crash etc.), report it and restart next time
		http://vanillajava.blogspot.com/2011/12/test-complete-failure-of-jvm.html
	- make it reliable

- refactor jumi-actors-maven-plugin
	- DummyListenerToEvent: rename sender to target
	- EventToDummyListener: rename listener to target
	- @Generated annotation, example: @Generated(value = "fi.jumi.codegenerator.EventStubGenerator", comments = "Generated based on fi.jumi.codegenerator.DummyListener", date = "2000-01-01")
	- annotation to suppress unchecked warnings due to type erasure?
	- toString?
	- Externalizable? should give overall best performance without additional dependencies: https://github.com/eishay/jvm-serializers/wiki/
	- plugin pom: add-source with http://mojo.codehaus.org/build-helper-maven-plugin/
	- install plugin to local repository to avoid false alarms in jumi-core pom

- organize the project so that it's possible to run unit tests separate from end-to-end tests
	- maybe using ClasspathSuite?

- "Error creating shaded jar", probably an issue with NTFS's pending delete and the shade plugin
	- make a bug request, maybe also a patch
	http://mail-archives.apache.org/mod_mbox/maven-dev/200808.mbox/%3C835d522e0808281121g47eedd04u3c056998569be860@mail.gmail.com%3E

- investigate warnings on build:
	- happens when jumi-core-0.1.0-SNAPSHOT.jar (or daemon JAR) exists from the previous build
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TailerListener.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TailerListenerAdapter.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TeeInputStream.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/XmlStreamReader.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar

- Pronouncing Jumi: ['jumi]
	http://en.wikipedia.org/wiki/International_Phonetic_Alphabet
