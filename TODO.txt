
!! - end-to-end tests: reporting test output
	!! - capture and show System.out
		OK - end-to-end test
		!! - TextUI
		- TextUIParser
		- implement the capturer
		- plug in the capturer in Main
		- add the plumming for forwarding the events
	- capture and show System.err
	- test: printing from the same thread to out & err should be synchronous, unlike in probably every IDE
	- hacking System.out/err
		- tests should restore the original out/err defensively in @After
		- concurrency test, no interleaving: out.println("O") and err.println("E") from different threads, output must not contain "OE"/"EO" but only "O\nE\n"
		- unit test: the PrintStreams for our & err must sync on the same object, testable by checking holdsLock in a mock OutputStream
			- Thread.holdsLock(java.lang.Object)
			- ReentrantLock.isHeldByCurrentThread()
		- generic test: all methods on our custom PrintStream must delegate to the PrintStream given as parameter, testable with reflection and CGLIB-proxy as target mock
			- note: can't override just selected methods, because the print's delegate to a private method, and anyways it would couple to PrintStream's implementation details
			- might break in future Java versions, if more methods are added to PrintStream, so beware of it
			! - or just use a CGLIB proxy (net.sf.cglib.proxy.MethodInterceptor which synchronizes and delegates to real PrintStream, except net.sf.cglib.proxy.NoOp for Object's methods)
	- tell launcher that what encoding the stdout/stderr use
		- test: one daemon using ISO-8859-1 and another using UTF-8 to print åäö, the output should be the same

- move SimpleUnit into its own module; a usable example, a seedwork (http://www.martinfowler.com/bliki/Seedwork.html)

- first release (for testing framework developers)
	- write known limitations to release notes (to through all TODO comments and notes)
	- publish a build
	- create a demo video for framework developers
	- advertise publicly
	- contact selected testing framework developers directly

- end-to-end tests: running multiple test classes
	- it's not sure whether SuiteRunner works correctly when there are many test classes
	- test class inclusion patterns (*Test, Test*, some.package.*, some.package.** etc.)
		- consider using Java 7's glob/regex patterns
			http://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob
			http://docs.oracle.com/javase/7/docs/api/java/nio/file/FileSystem.html#getPathMatcher(java.lang.String)
	- set a good default value for fi.jumi.core.config.SuiteConfiguration#includedTestsPattern

- SuiteListener#onFailure cannot rely on the exception class from existing in the caller's class loader
	- introduce ExceptionSafetyGloves?
		- implementable as an exception with custom toString and that copies the StackTraceElements
		- provide getExceptionClassName: String
	- test: same toString as the original exception
	- test: same StackTraceElements
	- test: same toString & StackTraceElements also for cause
	- test: same toString & StackTraceElements also for suppressed (Java 7+)
	- test: same output of printStackTrace (should pass, given the above tests)

- end-to-end tests: setting the working directory for a test run

- end-to-end tests: failures outside tests (in drivers and core)
	OK - actor tests print dummy exceptions; solve by having a custom pluggable exception handler which doesn't print stack traces of a DummyException class
	OK - consider a command for stopping actors (Thread.interrupt(), DeathPill)
	- consider a supervisor pattern for actors (like in Akka)
	- maybe testable by throwing exceptions from a driver or by producing non-valid .class files

- make jumi-actors its own project
	would speed up the build by 50%, send a message about its stability (1.0+ version), and allow dependencies in examples and benchmarks (e.g. Akka)
	- refactor build scripts to be project-independent
	- move build scripts to their own project (jumi-scripts)
	- update deployment pipeline to fetch scripts separately (might not need to store as artifacts)
	- copy jumi to jumi-actors repository, disconnect their histories
	- remove unnecessary stuff from parent POM
	- move user guide to the new project's wiki
	- update all links on the web site, add links to all repositories

- actors examples & benchmarks:
	OK - create benchmarks: ring round trip, warm startup
	- create jumi-actors-examples, put there the examples and benchmarks
	- create a benchmark to compare against Akka Actors
		- ring round trip
		- warm startup
		- cold startup (can't use Caliper, need a main method in a fresh JVM, or could it be done with custom class loaders?)
	- create a benchmark to compare reflection vs code generation based eventizers
		- also use it as an example of using the code generator plugin
	- add the benchmark results to the web site

- misc refactoring
	- after upgrading to (presumably) JUnit 4.11, refactor BuildTest's parameterized descriptions
		https://github.com/KentBeck/junit/pull/145
		https://github.com/KentBeck/junit/pull/393
	- aftermath of upgrading to Java 7
		SKIP - extract actors to their own project; IDEA can't handle well mixing language levels in the same project
			-> works in IDEA 12
		OK - BuildTest: enable all_classes_must_use_the_specified_bytecode_version also when building in IDEA
		OK - IDEA should warn about the use of APIs newer than the module language level
			-> works when changed the module to use JDK 6
		- we have many ASM versions we have on classpath (caliper depends on ASM 3), block "asm:*" artifacts with maven-enforcer-plugin?
	- use ~/.jumi directory for the daemon jar
	- make the number of test threads by default the number of CPUs + 1 or similar
	- make JUnit print a thread dump when a test times out due to @Test(timeout)
		- improve JUnit's test timeouts to show a stack trace of the timed out test, to help debugging sporadic timeouts in RunningTestsTest
	- evaluate whether some of the concurrent tests could be made simpler by using MultithreadedTC
		http://code.google.com/p/multithreadedtc/
	- rename TestClass to TestCase (or a better term?), wrap it in a value object, allow any files and not just .class (maybe just pretty-print classes)
		- in Java, "testclass" appears preferable over "fixture":
		- suggestions: pack, (group), (bundle), file
		http://xunitpatterns.com/Testcase%20Class.html
		http://xunitpatterns.com/XUnit%20Terminology%20Crossreference.html
	- BuildTest: make sure that jumi-daemon.jar contains everything from jumi-api.jar no matter what
		- test the test by adding an unused class to jumi-api
		- add includes if necessary: http://maven.apache.org/plugins/maven-shade-plugin/examples/includes-excludes.html
	- fix Maven's pomPropertiesFile element, get rid of the current workaround of a separate build.properties
		http://jira.codehaus.org/browse/MSHARED-154
		http://stackoverflow.com/questions/10102818/custom-values-in-maven-pom-properties-file
		<archive> element: http://maven.apache.org/plugins/maven-jar-plugin/jar-mojo.html
		<pomPropertiesFile> element: http://maven.apache.org/shared/maven-archiver/index.html
	- unit tests for fi.jumi.core.results
	- combine DuplicateOnTestFoundEventFilter and SuiteListenerAdapter, rename to SuiteEventNormalizer/RunEventNormalizer
	- there might be unnecessary eventizers in fi.jumi.daemon.Main and /jumi-core/pom.xml
		- create EventizerUsageStatistics (extends EventizerProvider), print usage statistics when program exits
	- logging actor messages could benefit from seeing that from which actor a messages was sent; a trace of intermediate actors
	- refactor SimpleUnit
		- simplity the tests by creating helper which runs using SuiteRunner, collects the results and provides assert methods
		- move to its own module, simpleunit
	- migrate Specsy to use Jumi (need the above test helper first)
	- packages by functionality
		core
			discovery
			drivers
			suite
			classes
			runs
	- organize the project so that it's possible to run unit tests separate from end-to-end tests
		- put end-to-end tests in their own package, test.fi.jumi?
		- or use JUnit categories, maybe with a custom runner?
		- or use ClasspathSuite?
	- bullet proofing the public api, cross-references from javadocs to tests (a new xref tag?)
		- testId in onTestFinished must be correspond last onTestStarted, correctly nested
		- testId in onFailure must equal the currently running test
		- disallow TestNotifier.fireFailure and fireTestFinished after test is finished
		- log all incorrect usages to some internal log and make the suite fail?
		- TestClassListener: consider eliminating redundant parameters
	- evaluate JarJar or ProGuard, maybe it could minimize the jars better than the shade plugin by removing also unused methods
		http://sonatype.github.com/jarjar-maven-plugin/
		http://pyx4me.com/pyx4me-maven-plugins/proguard-maven-plugin/
		https://github.com/wvengen/proguard-maven-plugin (uses newer version of ProGuard)
		1. run shade plugin to embed all dependencies and create the dependency-reduced POM
		2. run proguard to minimize the JAR at method level and preverify (in and out files must be different?)
		3. replace the main artifact
			http://mojo.codehaus.org/build-helper-maven-plugin/attach-artifact-mojo.html
	- seems that Eventizer.newBackend is not used; keep it for symmetry or remove it?
	- consider logging with MinLog http://code.google.com/p/minlog/
		or create our own clone, since it's just one file (and )
		- actors: extract AbstractMessageLogger from PrintStreamMessageLogger
		- create logger specific implementation of AbstractMessageLogger
		- customize MinLog's output to use microsecond accuracy, similar to PrintStreamMessageLogger

- improving TextUI
	OK - spacing between test runs (empty line or horizontal bar?)
	- option for showing all test runs or only failing
	(- if multiple readers are needed: Streamer class for receiving events from UI thread)
	- different colors for out (default), err (red), metadata e.g. test names (blue), binary output (yellow BG)?
		- JCons (uses JNI on Windows, so maybe support only Unix)
			http://jcons.sourceforge.net/
			http://sourceforge.net/projects/jcons/
		- could also JLine do it? (uses a native binary)
			http://jline.sourceforge.net/
			https://github.com/jline
		- misc links
			http://www.codeguru.com/forum/showthread.php?t=504096
			http://blogs.atlassian.com/2009/10/colour_your_console_ansicolor/
			http://en.wikipedia.org/wiki/ANSI_escape_code
			http://www.velocityreviews.com/forums/t143949-text-color-in-windows-console.html
			http://academic.evergreen.edu/projects/biophysics/technotes/program/ansi_esc.htm
			http://www.tldp.org/LDP/abs/html/colorizing.html
			http://stackoverflow.com/questions/7445658/how-to-detect-if-the-console-does-support-ansi-escape-codes-in-python
		- ANSI escape codes work in IDEA?
			http://youtrack.jetbrains.net/issue/IDEA-68679

- write daemon output to log file
	- use Process.getInputStream to write the log file in JumiLauncher's process
		- write log to JUMI_HOME/run/*/console.log
		- default JUMI_HOME to ~/.jumi
	- update e2e tests to read the output from the log file
	- upgrade to Java 7
	- use ProcessBuilder.redirectOutput to write the log file (else the process would hang when the launcher JVM exits)
	- get rid of fi.jumi.launcher.remote.ProcessStartingDaemonSummoner#copyInBackground
		- don't create background threads in the launcher automatically (the tests should create them explicitly, if any)
		- also remove the hack in fi.jumi.test.ReleasingResourcesTest#launcher_stops_the_threads_it_started

- end-to-end tests: persistent daemon process
	- spike communicating over memory-mapped files
	- should drive better design on launcher side
	- connect to existing process
		- cancel idleTimeout if somebody connects again (unit test only?)
	- if daemon dies unexpectedly (System.exit/halt, JVM crash etc.), report it and restart next time
		http://vanillajava.blogspot.com/2011/12/test-complete-failure-of-jvm.html
	- if daemon disconnects due to network problem, reconnect and resume where we were left?
		- should not exit the JVM (due to idle timeout) while tests are running
	- make it reliable

- communicate using memory-mapped files?
	http://en.wikipedia.org/wiki/Memory-mapped_file
	http://javarevisited.blogspot.fi/2012/01/memorymapped-file-and-io-in-java.html
	http://stackoverflow.com/questions/5943365/java-tcp-ip-socket-latency-stuck-at-50-s-microseconds-used-for-java-ipc
	http://stackoverflow.com/questions/6096485/how-to-dynamically-expand-a-memory-mapped-file
	https://github.com/peter-lawrey/Java-Chronicle (see how IPC is done here)
	- benefits:
		- more secure than sockets (uses file system permissions)
		- should be faster (benchmark latency and throughput)
		- automatically saved to file for later use
		- no need to close socket connections
		- no need for a networking library
	- disadvantages:
		- how to manage multiple writers? one file per writer?
		- probably requires polling to get informed about updates
	- need to find out how to do synchronization
		http://stackoverflow.com/questions/4743380/controlling-read-writes-to-memory-mapped-files-windows
	- after implementing, consider refactoring the following places:
		fi.jumi.core.TestRunCoordinator#addSuiteListener
		fi.jumi.daemon.DaemonNetworkEndpoint#onConnected
		fi.jumi.launcher.remote.RemoteSuiteLauncher#onDisconnected

- refactor jumi-actors-maven-plugin
	- find a way to read the compiler language level from maven-compiler-plugin, instead of configuring it separately for this plugin
		http://maven.apache.org/ref/3.0.4/maven-core/apidocs/org/apache/maven/project/MavenProject.html
			getPlugin
		http://maven.apache.org/ref/3.0.4/maven-core/apidocs/org/apache/maven/plugin/BuildPluginManager.html
		http://maven.apache.org/ref/3.0.4/maven-core/apidocs/org/apache/maven/plugin/MavenPluginManager.html
			getConfiguredMojo
		http://maven.apache.org/ref/2.2.1/maven-core/apidocs/org/apache/maven/plugin/PluginManager.html (deprecated)
			getPluginDefinitionForPrefix
			getPluginComponent
		http://stackoverflow.com/questions/526733/maven-plugin-executing-another-plugin
		http://timmoore.github.com/mojo-executor/
		http://stackoverflow.com/questions/4243686/how-to-programatically-invoke-a-maven-dependency-plugin/5761554#5761554
	- DummyListenerToEvent: rename sender to target
	- EventToDummyListener: rename listener to target
	- switch to using Eclipse JDT DOM for code generation, create an internal DSL as necessary (factory methods to avoid setter hell)
		http://blog.cedarsoft.com/2010/08/code-generation-done-right/
		http://www.eclipse.org/jdt/core/index.php
		http://help.eclipse.org/indigo/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/dom/package-summary.html
		- walking skeleton
			1. take the old generator's output
			2. parse it to AST
				example: http://help.eclipse.org/indigo/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/dom/AST.html
				http://help.eclipse.org/indigo/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/dom/ASTParser.html
			3. convert AST to string
				example: http://help.eclipse.org/indigo/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/dom/AST.html
				http://help.eclipse.org/indigo/topic/org.eclipse.platform.doc.isv/reference/api/org/eclipse/jface/text/Document.html
				http://help.eclipse.org/indigo/topic/org.eclipse.platform.doc.isv/reference/api/org/eclipse/jface/text/IDocument.html#get()
			4. format using Eclipse Formatter
				http://help.eclipse.org/indigo/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/ToolFactory.html#createCodeFormatter
				http://help.eclipse.org/indigo/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/formatter/package-summary.html
				http://www.eclipse.org/jdt/core/codecoverage/B01/org.eclipse.jdt.core/org.eclipse.jdt.core.formatter/CodeFormatterApplication.java.html#L204
			5. use the Organize Imports operation, unless formatter already adds imports
				? http://help.eclipse.org/indigo/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/ui/actions/OrganizeImportsAction.html
				? http://plugins.intellij.net/plugin/?idea&id=6546
				http://stackoverflow.com/questions/2644440/simplifying-fully-qualified-names-in-eclipse
				- might need to transform the AST ourselves?
		- migrate to generating code with JDT AST
			- generate code with fully qualified names, rely on the formatter for imports
			- migrate to AST one method at a time, if possible
				- try using AST.newMethodDeclaration or AST.newBlock instead of AST.newCompilationUnit
			- delete the old code generator
	- @Generated annotation, example: @Generated(value = "fi.jumi.codegenerator.EventStubGenerator", comments = "Generated based on fi.jumi.codegenerator.DummyListener", date = "2000-01-01")
	- @Override annotation to all methods
	- annotation to suppress unchecked warnings due to type erasure?
	- toString?
	- hand-written serialization using bare DataOutput/DataInput? should give overall best performance without additional dependencies: https://github.com/eishay/jvm-serializers/wiki/
	- plugin pom: add-source with http://mojo.codehaus.org/build-helper-maven-plugin/
	- install plugin to local repository to avoid false alarms in jumi-core pom
	- evaluate triggering the code generator using JSR 269 (might be hard to generate code for 3rd party classes such as Runnable?)
		! http://deors.wordpress.com/2011/10/08/annotation-processors/
		! http://deors.wordpress.com/2011/10/31/annotation-generators/
		http://weblogs.java.net/blog/tball/archive/2006/09/hacking_javac.html
		http://code.google.com/p/genftw/
		http://code.google.com/p/objectify-gwtkey/

- deployment pipeline
	jumi:
		build
			build-release
		analyze
			coverage-report
	jumi-integration:
		test
			integration-test
	jumi-publish:
		publish [M]
			push-staging
			promote-staging
			smoke-test
			promote-central
		announce [M]
			update-www
			send-emails
	- upgrade to Go 12.3
	- enable deployment for all except end-to-end tests and the aggregate pom: jumi-api, jumi-core, jumi-daemon, jumi-launcher
	- create jumi-integration and add it to the pipeline
		- integration tests for Specsy
		- platform for running the tests
		- run an untrusted go-agent in a restricted environment
		- add it to the pipeline
	- push-button releasing the staging repository
		- run smoke tests before promoting
		- if smoke tests pass, promote automatically from OSSRH to Central
			http://www.sonatype.com/books/nexus-book/reference/staging-sect-managing-plugin.html
			https://repository.sonatype.org/content/sites/maven-sites/nexus-maven-plugin/
	- update the version number of latest release to the web site
	- update javadocs to the web site

- web site improvements
	- site for jumi-actors-maven-plugin
		http://www.vineetmanohar.com/2009/04/how-to-auto-generate-maven-plugin-documentation/
		http://stackoverflow.com/questions/2912665/maven-plugin-site
		http://maven.apache.org/guides/mini/guide-site.html
	- aggregated javadoc of all modules?
		http://maven.apache.org/plugins/maven-javadoc-plugin/aggregate-mojo.html

- write performance tests
	- test: suite with a hundred test classes, each with a hundred tests, some of which also do printing; measure total time of running the suite
	- experiment with different queue implementations, for example ConcurrentLinkedQueue
	- try following the single writer principle: http://mechanical-sympathy.blogspot.com/2011/09/single-writer-principle.html
		- for example: separate queue for each test worker (implies parallelism = locally sequential, except for slow tests?, use a work stealing executor?) and one thread which loops through them and writes to the coordinator actor queue

- "Error creating shaded jar", probably an issue with NTFS's pending delete and the shade plugin
	- make a bug request, maybe also a patch
	http://mail-archives.apache.org/mod_mbox/maven-dev/200808.mbox/%3C835d522e0808281121g47eedd04u3c056998569be860@mail.gmail.com%3E

- investigate warnings on build:
	- happens when jumi-core-0.1.0-SNAPSHOT.jar (or daemon JAR) exists from the previous build
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TailerListener.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TailerListenerAdapter.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TeeInputStream.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/XmlStreamReader.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar

- Pronouncing Jumi: ['jumi]
	http://en.wikipedia.org/wiki/International_Phonetic_Alphabet
