
TODO NEXT:
- intellij annotations must be found from a maven repository (or system scope?)
	only found unofficially:
		http://www.mvnsearch.org/maven2/com/intellij/annotations/8.0/
		http://maven.raffael.ch/com/intellij/annotations/
		http://www.mvnsearch.org/maven2/com/intellij/intellilang/1.0/
	upload manually:
		https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide
		!! https://docs.sonatype.org/display/Repository/Uploading+3rd-party+Artifacts+to+Maven+Central
	version differences:
		9.0.4 == 10.5
		8.1.4 ~= 9.0.4 (whitespace differences)
- "Error creating shaded jar", probably an issue with NTFS's pending delete and the shade plugin
	http://mail-archives.apache.org/mod_mbox/maven-dev/200808.mbox/%3C835d522e0808281121g47eedd04u3c056998569be860@mail.gmail.com%3E
- hide the maven warning about 'parent.relativePath'
- end-to-end tests: run tests (simplest possible - zero tests?)
- public api (create "SampleUnit")

[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile) on project jumi-daemon: Compilation failure: Compilation failure:
[ERROR] \DEVEL\Jumi\jumi\jumi-daemon\src\main\java\net\orfjackal\jumi\daemon\Main.java:[7,30] package net.orfjackal.jumi.core does not exist
[ERROR] \DEVEL\Jumi\jumi\jumi-daemon\src\main\java\net\orfjackal\jumi\daemon\Main.java:[11,27] cannot find symbol
[ERROR] symbol  : variable Hello
[ERROR] location: class net.orfjackal.jumi.daemon.Main

- investigate warnings on build:

[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TailerListener.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TailerListenerAdapter.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TeeInputStream.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/XmlStreamReader.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar

- Pronouncing Jumi: ['jumi]
	http://en.wikipedia.org/wiki/International_Phonetic_Alphabet

ROADMAP:
- Initial relase, technology preview
	- Runs tests on many cores
	- Custom JVM options
	- Caches library JARs
	- Make sure that test code cannot access the classes used by Jumi, except Jumi API; avoid library version conflicts using custom class loaders
	- Minimal console UI, shows only failing tests, configured using Java code
	- Debug tray GUI, shows only individual test runs (list of run IDs on left, run log on right; maybe also the test names in a tree, leftmost; print all test run data in log, but no colors or styles)
	- New runner for Specsy (Specsy 2: rewrite in Java, support more languages)
	- Publish a video demonstrating the speed. Use Dimdwarf as a sample project. Compare test run times:
		- Maven (only the test stage of the build)
		- IDEA
		- Eclipse
		- NetBeans
		- sbt (about same speed as Jumi?)
		- Jumi (1-thread, cold-start)
		- Jumi (1-thread, warm-start)
		- Jumi (4-thread, cold-start)
		- Jumi (4-thread, warm-start)

- Jumi Cluster, initial release
	- Runs tests on many machines (detects changed files and uploads them)
	- Simplest possible class-level distribution (round-robin over all machines, double-run test classes on local machine if the local machine runs out of work before the remote machines return their results)
	- Configuration using text files, no UI
	- Minimal single-user authentication (using Apache Shiro), no encryption
	- Release first with free evaluation licences, then build proper checkout systems and license checks

- Integration test project
	- Infrastructure for running tests against specified Jumi version
	- Tests for Jumi Cluster
	- Document and advertise it to framework developers

- Gather feedback and figure out what to build next (a proper UI perhaps; delay interaction design until here)

- Planned CORE features:
	- Build tool and IDE integration (Maven has the highest priority)
	- Well designed UI
	- Statistics (required by many other features)
	- Test priorization, run first those which will most probably fail, run fast tests first etc.
	- Per-module working directory (requires a separate JVM for each module)
	- IO/CPU boundness checking
	- Work around the issue of class loader locking the JARs (it's possible, though rare, that some JAR dependencies are generated by the same build)
	- Embed classmembersorter as a utility, in case framework developers would like to use it?
	- Faking "java.class.path", so that code which relies on it would not be disturbed by the use of multiple classloaders (should be optional and off by default?)

- Planned CLUSTER features:
	- Combine privileges from multiple licenses, limit concurrent users
	- Make buying a license easy, make sells scalable (fully automated)
	- Configuration UI (requires a plugin API)
	- Cloud provider integration (Amazon, others)
	- Provide startup scripts for the cluster daemon (Linux, Windows)
	- Location optimization: run fast tests locally
	- Distribute tests evenly over servers, based on expected duration
	- Test-level distribution (execute one test class over multiple servers)
	- Multi-environment test execution (e.g. run all tests on both Windows and Linux, or different JVM versions)
	- Multi-user authentication (per-user keys)
	- Encrypted communication over network (optional; takes CPU power)
