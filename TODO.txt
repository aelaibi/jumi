
OK - end-to-end tests: discovering test classes based on file patterns
	OK - write an e2e test that executes multiple tests using a pattern
	OK - pass the parameters as SuiteConfiguration.testFilesPattern
		OK - test class inclusion patterns (*Test, Test*, some.package.*, some.package.** etc.)
			- consider using Java 7's glob/regex patterns: "glob:com/example/**Test.class"
			http://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob
			http://docs.oracle.com/javase/7/docs/api/java/nio/file/FileSystem.html#getPathMatcher(java.lang.String)
		OK - set a good default value e.g. "*Test"
	OK - try in practise whether the default pattern works
	OK - create FileNamePatternTestClassFinder
		OK - at least at first find only tests from directories, nor JARs; Java 7's ZipFileSystem is broken:
			http://stackoverflow.com/questions/9873845/java-7-zip-file-system-provider-doesnt-seem-to-accept-spaces-in-uri
			http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7156873
			- fixed in 7u12: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=8001178
		OK - connect to TestClassFinderFactory, get test classes dir from suite configuration
		OK - support for multiple directories
	OK - update JumiBootstrap

OK - SuiteListener#onFailure cannot rely on the exception class from existing in the caller's class loader
	OK - generate an exception class in sample.CustomExceptionTest, or just store the .class in version control /end-to-end-tests/src/main/testdata
	OK - introduce ExceptionSafetyGloves/StackTrace?
		OK - implementable as an exception with custom toString and that copies the StackTraceElements
		OK - provide getExceptionClassName: String
	OK - test: same toString as the original exception
	OK - test: same StackTraceElements
	OK - test: same toString & StackTraceElements also for cause
	OK - test: same toString & StackTraceElements also for suppressed (Java 7+)
	OK - test: same output of printStackTrace (should pass, given the above tests)
	OK - wrap the SuiteListener in fi.jumi.daemon.DaemonNetworkEndpoint#onConnected to a SerializableSuiteListener

OK - default test file pattern: should not match inner classes (i.e. "$" in file name)
	OK - easiest to configure by providing includedTestsPattern & excludedTestsPattern?
		http://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#excludes
		http://maven.apache.org/surefire/maven-surefire-plugin/examples/inclusion-exclusion.html
		OK - add the parameters to SuiteConfiguration
		OK - create a IncludeExcludePathMatcher that composes two PathMatchers
		OK - use it in SuiteConfiguration
		OK - check the parameters when they are configured
		OK - use SuiteConfiguration.createTestFileMatcher
	OK - FileNamePatternTestClassFinderTest: test for no matches
	OK - remove the option for enumerating the test class names to run
		OK - create a convenience method in SuiteConfigurationBuilder that converts class names to patterns
		OK - simplify TestClassFinderFactory, remove EnumeratedTestClassFinder
	SKIP - setters for classPath and jvmOptions

OK - refactor: move class loading out of TestClassFinder, for example into SuiteRunner

!! - end-to-end tests: setting the working directory for a test run
	!! - e2e test: print working directory
	- add workingDirectory to SuiteConfiguration
	- update fi.jumi.launcher.remote.ProcessStartingDaemonSummoner#connectToDaemon

- use ~/.jumi directory for the daemon jar
	- add DaemonConfiguration property
	- set the default

- misc refactoring:
	- extract all construction from TestRunCoordinator and SuiteRunner into SuiteFactory
	- inline TestRunCoordinator into DaemonNetworkEndpoint, remove CommandListener#addSuiteListener
	- reorder packages, see below "packages by functionality"
		- suite, drivers, runs, output, api, results, config, discovery, network
		- move DriverRunner into drivers
		- move TestClassListener into runs (rename to RunListener)
	- create TestFile value object

- release 0.3
	- tidy up release notes
	OK - bump version
	- release
	- update wiki for JumiBootstrap
	- search & remove stale .jumi directories from all projects after upgrading them, remove from .gitignore

- JUnit backward compatibility
	- end-to-end test: run tests written in JUnit 4, JUnit 3, custom JUnit runner

- end-to-end tests: reporting failures outside tests (in drivers and core)
	- maybe testable by throwing exceptions from a driver or by producing non-valid .class files
	- given an error message if starting the daemon fails (for example out of memory)
	- give a warning if a test spawned a thread which prints something after the test ended (but don't hide the output)

- ignoring tests
	- ignoring without running a test
	- ignoring after test has started
	- JUnit @Ignore
	- JUnit assumptions

- release 0.4
	- tidy up release notes
	- bump version
	- release
	- create a performance comparison (e.g. with Dimdwarf's tests)
	- promote widely

- misc refactoring (choose some, defer others)
	- thread-safety-checker: when an inner class is missing the annotation, use the annotation of the enclosing class or default to @NotThreadSafe when the enclosing class has any concurrency annotation
	- replace SuiteRunnerIntegrationHelper with TestBench?
	- when default charset is ISO-8859-1 (fi.jumi.test.StandardOutputTest#compensates_for_the_default_charset_of_the_daemon_process), Unicode chars are lost already when they are captured (nihao becomes ??); should we do something about it?
		(1) We could have an internal PrintStream which uses UTF-8/16 and capture losslessly from it, after which it's routed to a PrintStream which uses the actual encoding (might interfere with writing binary data to stdout).
		(2) Or then keep it as is. That would be the way that System.out works normally. Principle of least surprise?
	- consider implementing SynchronizedPrintStream using something else than CGLIB (ASM? Tapestry's Plastic?) to make the JAR smaller
	- after upgrading to (presumably) JUnit 4.11, refactor BuildTest's parameterized descriptions
		https://github.com/KentBeck/junit/pull/145
		https://github.com/KentBeck/junit/pull/393
	- check whether we still have many ASM versions we have on classpath (caliper depends on ASM 3), block "asm:*" artifacts with maven-enforcer-plugin?
	- make the number of test threads by default the number of CPUs + 1 or similar
	- make JUnit print a thread dump when a test times out due to @Test(timeout)
		- improve JUnit's test timeouts to show a stack trace of the timed out test, to help debugging sporadic timeouts in RunningTestsTest
	- evaluate whether some of the concurrent tests could be made simpler by using MultithreadedTC
		http://code.google.com/p/multithreadedtc/
	- rename TestClass to TestCase (or a better term?), wrap it in a value object, allow any files and not just .class (maybe just pretty-print classes)
		- in Java, "testclass" appears preferable over "fixture":
		- suggestions: pack, (group), (bundle), file
		http://xunitpatterns.com/Testcase%20Class.html
		http://xunitpatterns.com/XUnit%20Terminology%20Crossreference.html
	- BuildTest: make sure that jumi-daemon.jar contains everything from jumi-api.jar no matter what
		- test the test by adding an unused class to jumi-api
		- add includes if necessary: http://maven.apache.org/plugins/maven-shade-plugin/examples/includes-excludes.html
	- fix Maven's pomPropertiesFile element, get rid of the current workaround of a separate build.properties
		http://jira.codehaus.org/browse/MSHARED-154
		http://stackoverflow.com/questions/10102818/custom-values-in-maven-pom-properties-file
		<archive> element: http://maven.apache.org/plugins/maven-jar-plugin/jar-mojo.html
		<pomPropertiesFile> element: http://maven.apache.org/shared/maven-archiver/index.html
	- unit tests for fi.jumi.core.results
	- combine DuplicateOnTestFoundEventFilter and SuiteListenerAdapter, rename to SuiteEventNormalizer/RunEventNormalizer
	- there might be unnecessary eventizers in fi.jumi.daemon.Main and /jumi-core/pom.xml
		- create EventizerUsageStatistics (extends EventizerProvider), print usage statistics when program exits
	- packages by functionality
		core
			discovery
			drivers
			suite
			classes
			runs
	- organize the project so that it's possible to run unit tests separate from end-to-end tests
		- put end-to-end tests in their own package, test.fi.jumi?
		- or use JUnit categories, maybe with a custom runner?
		- or use ClasspathSuite?
	- bullet proofing the public api, cross-references from javadocs to tests (a new xref tag?)
		- testId in onTestFinished must be correspond last onTestStarted, correctly nested
		- testId in onFailure must equal the currently running test
		- disallow TestNotifier.fireFailure and fireTestFinished after test is finished
		- log all incorrect usages to some internal log and make the suite fail?
		- TestClassListener: consider eliminating redundant parameters
	- evaluate JarJar or ProGuard, maybe it could minimize the jars better than the shade plugin by removing also unused methods
		http://sonatype.github.com/jarjar-maven-plugin/
		http://pyx4me.com/pyx4me-maven-plugins/proguard-maven-plugin/
		https://github.com/wvengen/proguard-maven-plugin (uses newer version of ProGuard)
		1. run shade plugin to embed all dependencies and create the dependency-reduced POM
		2. run proguard to minimize the JAR at method level and preverify (in and out files must be different?)
		3. replace the main artifact
			http://mojo.codehaus.org/build-helper-maven-plugin/attach-artifact-mojo.html
	- consider logging with MinLog http://code.google.com/p/minlog/
		or create our own clone, since it's just one file (and )
		- actors: extract AbstractMessageLogger from PrintStreamMessageLogger
		- create logger specific implementation of AbstractMessageLogger
		- customize MinLog's output to use microsecond accuracy, similar to PrintStreamMessageLogger

- write daemon output to log file
	- use ProcessBuilder.redirectOutput to write the log file (else the process would hang when the launcher JVM exits)
		- write log to JUMI_HOME/run/*/console.log
		- default JUMI_HOME to ~/.jumi
	- update e2e tests to read the output from the log file
	- get rid of fi.jumi.launcher.remote.ProcessStartingDaemonSummoner#copyInBackground
		- don't create background threads in the launcher automatically (the tests should create them explicitly, if any)
		- also remove the hack in fi.jumi.test.ReleasingResourcesTest#launcher_stops_the_threads_it_started

- release 0.4 update?

- end-to-end tests: persistent daemon process
	- spike communicating over memory-mapped files (see below)
	- should drive better design on launcher side
	- connect to existing process
		- cancel idleTimeout if somebody connects again (unit test only?)
	- if daemon dies unexpectedly (System.exit/halt, JVM crash etc.), report it and restart next time
		http://vanillajava.blogspot.com/2011/12/test-complete-failure-of-jvm.html
	- how to show unfinished test runs in the TextUI? (both JVM crash unfinishing all tests, and buggy testing framework unfinishing some tests)
	- if daemon disconnects due to network problem, reconnect and resume where we were left?
		- should not exit the JVM (due to idle timeout) while tests are running
	- make it reliable

- communicate using memory-mapped files?
	http://en.wikipedia.org/wiki/Memory-mapped_file
	http://javarevisited.blogspot.fi/2012/01/memorymapped-file-and-io-in-java.html
	http://stackoverflow.com/questions/5943365/java-tcp-ip-socket-latency-stuck-at-50-s-microseconds-used-for-java-ipc
	http://stackoverflow.com/questions/6096485/how-to-dynamically-expand-a-memory-mapped-file
	https://github.com/peter-lawrey/Java-Chronicle (see how IPC is done here)
	- benefits:
		- more secure than sockets (uses file system permissions)
		- should be faster (benchmark latency and throughput)
		- automatically saved to file for later use
		- no need to close socket connections
		- no need for a networking library
	- disadvantages:
		- how to manage multiple writers? one file per writer?
		- probably requires polling to get informed about updates
	- need to find out how to do synchronization
		http://stackoverflow.com/questions/4743380/controlling-read-writes-to-memory-mapped-files-windows
	- after implementing, consider refactoring the following places:
		fi.jumi.core.TestRunCoordinator#addSuiteListener
		fi.jumi.daemon.DaemonNetworkEndpoint#onConnected
		fi.jumi.launcher.remote.RemoteSuiteLauncher#onDisconnected

- release 0.5
	- tidy up release notes
	- bump version
	- release
	- create a performance comparison (e.g. with Dimdwarf's tests)
	- promote widely

- deployment pipeline
	jumi:
		build
			build-release
		analyze
			coverage-report
	jumi-integration:
		test
			integration-test
	jumi-publish:
		publish [M]
			push-staging
			promote-staging
			smoke-test
			promote-central
		announce [M]
			update-www
			send-emails
	- create jumi-integration and add it to the pipeline
		- integration tests for Specsy
		- platform for running the tests
		- run an untrusted go-agent in a restricted environment
		- add it to the pipeline
	- push-button releasing the staging repository
		- run smoke tests before promoting
		- if smoke tests pass, promote automatically from OSSRH to Central
			- consider migrating to nexus-staging-maven-plugin, https://github.com/sonatype/nexus-maven-plugins/tree/master/nexus-staging-maven-plugin
			http://www.sonatype.com/books/nexus-book/reference/staging-sect-managing-plugin.html
			https://repository.sonatype.org/content/sites/maven-sites/nexus-maven-plugin/
	- automate updating the web site
		- update the version number of latest release to the web site
		- update javadocs to the web site

- web site improvements
	- site for jumi-actors-maven-plugin
		http://www.vineetmanohar.com/2009/04/how-to-auto-generate-maven-plugin-documentation/
		http://stackoverflow.com/questions/2912665/maven-plugin-site
		http://maven.apache.org/guides/mini/guide-site.html
	- aggregated javadoc of all modules?
		http://maven.apache.org/plugins/maven-javadoc-plugin/aggregate-mojo.html

- improving TextUI
	(- if multiple readers are needed: Streamer class for receiving events from UI thread)
	- different colors for out (default), err (red), metadata e.g. test names (blue), binary output (yellow BG)?
		- JCons (uses JNI on Windows, so maybe support only Unix)
			http://jcons.sourceforge.net/
			http://sourceforge.net/projects/jcons/
		- could also JLine do it? (uses a native binary)
			http://jline.sourceforge.net/
			https://github.com/jline
		- misc links
			http://www.codeguru.com/forum/showthread.php?t=504096
			http://blogs.atlassian.com/2009/10/colour_your_console_ansicolor/
			http://en.wikipedia.org/wiki/ANSI_escape_code
			http://www.velocityreviews.com/forums/t143949-text-color-in-windows-console.html
			http://academic.evergreen.edu/projects/biophysics/technotes/program/ansi_esc.htm
			http://www.tldp.org/LDP/abs/html/colorizing.html
			http://stackoverflow.com/questions/7445658/how-to-detect-if-the-console-does-support-ansi-escape-codes-in-python
		- ANSI escape codes work in IDEA?
			http://youtrack.jetbrains.net/issue/IDEA-68679

- write performance tests
	- test: suite with a hundred test classes, each with a hundred tests, some of which also do printing; measure total time of running the suite
	- experiment with different queue implementations, for example ConcurrentLinkedQueue
	- try following the single writer principle: http://mechanical-sympathy.blogspot.com/2011/09/single-writer-principle.html
		- for example: separate queue for each test worker (implies parallelism = locally sequential, except for slow tests?, use a work stealing executor?) and one thread which loops through them and writes to the coordinator actor queue

- "Error creating shaded jar", probably an issue with NTFS's pending delete and the shade plugin
	- make a bug request, maybe also a patch
	http://mail-archives.apache.org/mod_mbox/maven-dev/200808.mbox/%3C835d522e0808281121g47eedd04u3c056998569be860@mail.gmail.com%3E

- investigate warnings on build:
	- happens when jumi-core-0.1.0-SNAPSHOT.jar (or daemon JAR) exists from the previous build
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TailerListener.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TailerListenerAdapter.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TeeInputStream.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/XmlStreamReader.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar

- Pronouncing Jumi: ['jumi]
	http://en.wikipedia.org/wiki/International_Phonetic_Alphabet
