
TODO NEXT:
- end-to-end tests: multiple tests
	OK - run on more than one thread; performance must improve (write a performance test with sleeps?)
		OK - testable with a static CountDownLatch used from two test methods
	OK - make it pass
		OK - SuiteRunner fires onSuiteFinished to early, because fi.jumi.core.runners.SuiteRunner.TestClassRunnerListenerToSuiteListener#onTestClassFinished is called too early (right after the tests are found and test runs started *asynchronously*)
			OK - fix TestClassRunner
				OK - wrap Executor, count workers
				OK - add assertions to fi.jumi.core.runners.TestClassRunnerTest#test_class_with_multiple_tests_which_are_run_in_parallel
				OK - see if SuiteRunner works now correctly
	OK - clean up TestClassRunner
		OK - extract WorkerCounter 
		OK - extract DriverRunnerSpawner
		OK - extract TestRunSpawner from DriverRunnerSpawner
	OK - merge AsynchronousExecutor with SingleThreadedActors?
	OK - clean up fi.jumi.actors.SingleThreadedActors#processEventsUntilIdle
	SKIP - give AppRunner a copy of all events, so that it can assert directly instead of parsing the output?
	OK - or then parse the text output; some regexp for getting the list of started/ended tests?
		OK - extract SuiteBuilder, SuiteMother
		OK - tests for TextUIParser (write against TextUI, don't mock its output)
			OK - test counts
			OK - test names (start and end events)
			OK - nested test names
			OK - many runs
				OK - ban junit:junit
					http://maven.apache.org/enforcer/enforcer-rules/bannedDependencies.html
				OK - update EventBuilder to generate runIds
				OK - RunId class to eliminate primitive obsession
				OK - make TextUI support multiple runs
				OK - make TextUIParser support multiple runs (see "regexp for parsing multiple runs 2.png")
		OK - change AppRunner to delegate to TextUIParser
			OK - update test count checks
			OK - expose run output form parser
			OK - update checkHasStackTrace
	OK - identify concurrent test runs with a unique ID (necessary yet?)
		OK - improve e2e test to check number of test runs
		OK - refactor the code to be changed
			OK - move duplicate removal from TestClassRunner to its own proxy class, to be composed inside SuiteRunner
			OK - rewrite TestClassRunnerTest in spec style
				OK - notifies when class is finished
				SKIP - forwards all other events
			OK - use WorkerCounter in SuiteRunner
			OK - rename SuiteRunnerTest to SuiteProtocolTest
			OK - create a new SuiteRunnerTest in spec style
				OK - notifies when all testclasses are finished
				OK - launches every testclass found, using its driver
				OK - removes duplicate onTestFound events (wiring test)
			OK - refactor TestRunSpawner
				OK - replace ExecutorListener.onCommandQueued with Executor.execute
				OK - ExecutorListener extends Executor
				OK - remove TestRunExecutor
				OK - rename MyPrivateExecutorListener to WorkerCountingExecutor
				OK - make the above public classes, rename TestRunSpawner to WorkerCountingExecutorSpawner
		OK - in jumi-core, event stubs for Executor and ExecutorListener go to the same package and conflict: ExecuteEvent gets overwritten, ExecutorListenerToEvent doesn't implement all methods
			OK? - fix bug: stubs for interfaces which extend interfaces should implement all inherited methods
			OK - fix bug: stubs for interfaces Foo and FooListener should go to separate packages
				OK - extract TargetPackageResolver from GenerateEventStubsMojo.getTargetPackage
					- methods: getFactoryPackage(), getStubsPackage(eventInterface) [during transition use the latter one]
					- one resolver for all EventStubGenerator instances, to resolve naming conflicts
				OK - there is no easy way to import a package
					OK - update Imports class to support importing package.*
					OK - update ClassBuilder to expose package import
					OK - update EventStubGenerator#getFactory to import stubsPackage
				OK - move reference stubs to DummyListener sub-package
				OK - always create sub-packages, so remove GenerateEventStubsMojo.createSubPackages
				OK - make EventStubGenerator responsible for creating sub-packages
				OK - put factories in the top-level package (the targetPackage specified in POM)
				OK - create sub-package names using Class.getSimpleName, without changing case or dropping "Listener"
					* still assumes that SimpleNames are unique, but that should be OK
				OK - update integration tests
		OK- update fi.jumi.core.runners.SuiteRunner.TestClassRunnerListenerToSuiteListener to use real runId
			OK - create RunIdSequence
			OK - write AssigningRunIdsTest against DefaultSuiteNotifier/DefaultTestNotifier
				OK - RunId is assigned when a test is started
				OK - nested tests in the same thread get the same RunId
				OK - new runs in the same thread get a different RunId
				OK - concurrent runs in other threads get a different RunId
					OK - extract mutable fields (RunContext) from CurrentRun into a ThreadLocal
				OK - nested tests in child threads get the same RunId
				OK - onRunStarted, onRunFinished events
			OK - propagate the RunIds to upper levels, until connected in SuiteRunner.TestClassRunnerListenerToSuiteListener
				OK - SuiteListenerProtocolTest: add tests for onRunStarted, onRunFinished
				OK - implement onRunStarted, onRunFinished in fi.jumi.core.runners.TestClassRunner
				OK - refactor CurrentRun, maybe move some event firing from the notifiers inside it
				OK - enable the disabled e2e tests
				OK - update the TextUI to use onRunStarted & onRunFinished
		OK - refactor tests; create hand-written spies
			OK - refactor TestClassRunnerTest's test to mention only onTestClassFinished
			OK - refactor SuiteRunnerTest's test to mention only onSuiteFinished
		OK - improve e2e test to check test start/end events
	OK - remove redundant parameters for SuiteListener
		OK - testClass can be deduced from onRunStarted's RunId
		OK - TestId of onTestFinished & onFailure can be deduced from last call to onTestStarted (also prevents faulty input)
		OK - refactor TextUI, keep hold of suite/run state better
	OK - eliminate duplicate method signatures in TestClassListener and TestClassRunnerListener
		OK - combine the interfaces
		SKIP - consider eliminating redundant parameters; should we also check for correctness here?
	- TestClassRunnerTest: write forwards_all_other_events (don't call start, check the assumed number of methods)
	- add @Override annotations to all interface implementations
		- enable "Missing @Override annotation" inspection
		- Analyze | Run Inspection by Name, Apply Quickfix
	- refactor TextUI
		- create SuiteState/SuiteEventDemuxer which collects all events and groups them into runs (fields: testNames, runs, suiteFinished, currentMessage)
		- move the counting passing/failing tests into its own visitor (fields: failedTests, allTests)
		- make SuitePrinter contain only printing commands, update it after updating SuiteState
		- create an abstract StatefulRunVisitor which keeps track of runningTests, gives access to testClass and testId (methods: getTestClass, getTestId, getTestName(testId), int getRunningTests)
		- make RunPrinter extend StatefulRunVisitor, do printing in overridden methods

- refactor jumi-actors
	- make it impossible to use actors wrong
		- ActorRef (might make spawners and auto wrapping unnecessary!)
			- return ActorRef from creation methods instead of the proxy
			- create NakedActorRef for unit testing, ProxyActorRef for production 
			- in all constructors and fields, use ActorRef instead of proxy to make it easier to keep track of the communication patterns
			- use ActorRef in callbacks (WorkerCounter, unattended workers, other method parameters if any)
			- eliminate spawners, see if it the code can be safe enough without them
		- wrap all NonThreadSafe collaborators of a worker automatically into a secondary actor.
			Usage:
			        Spawner<DriverRunnerFactory> driverRunnerSpawner = new Spawner<DriverRunnerFactory>(DriverRunnerFactory.class, new BareDriverRunnerFactory());
			        // ...
			        driverRunnerSpawner
			                .whenFinished(new OnWorkerFinished())
			                .create(testClass, driverClass, listener /*NOT thread-safe*/, executor /*thread-safe*/);
			Boilerplate:
				interface DriverRunnerFactory {
				    DriverRunner create(Class<?> testClass, Class<? extends Driver> driverClass, TestClassListener listener, Executor executor);
				}
				class BareDriverRunnerFactory implements DriverRunnerFactory {
				    @Override
				    public DriverRunner create(Class<?> testClass, Class<? extends Driver> driverClass, TestClassListener listener, Executor executor) {
				        return new DriverRunner(testClass, driverClass, new DefaultSuiteNotifier(listener), executor);
				    }
				}
		- use OnDemandActors only in classes whose responsibility is to start actors; current users:
			- fi.jumi.core.runners.DriverRunnerSpawner
				- now too complex
			- fi.jumi.core.runners.TestRunSpawner
				- now too complex
			- fi.jumi.core.runners.SuiteRunner & fi.jumi.core.TestRunCoordinator
				- extract TestClassFinderSpawner
			- fi.jumi.core.runners.TestClassRunner
				- push dependencies out of constructor (pass WorkerCounter and `this` as method parameters to DriverRunnerSpawner)
	- either, decouple unattended workers from Actors
		- hide WorkerCounter, create a wrapper: new MonitoredExecutor(realExecutor, onAllFinishedCallback)
			- thred safe, counts commands with AtomicInteger
			- executes the callback using realExecutor, as its own command
		- create a MonitoredExecutorSpawner which executes the callback in the current actor thread
		- use MonitoredExecutor instead of Actors.startUnattendedWorker (keep SingleThreadedActors.getExecutor)
		- remove Actors.startUnattendedWorker
		- try removing fi.jumi.core.runners.TestClassRunnerListener#onTestClassFinished
	- or, implement unattended workers as actors which stop themselves (Thread.interrupt()) after running the command
	- refactor Actors
		- make DynamicListenerFactory support all types without having to declare them
			- move the type comparison in Actors.getFactoryForType to ListenerFactory.supportsType
			- need to give type as parameter to DynamicListenerFactory.newFrontend/newBackend?
			- refactor tests to use just one DynamicListenerFactory, use generated factories only in Main
		- create a class (Actor?) to represent Actors.queueOfCurrentActor
			- wrap the MessageQueue in it
			- move processing the next message in it
			- move wiring the MessageQueue in it
				- from createPrimaryActor
				- from createSecondaryActor
		- create Actors.getCurrentActor: ActorRef
			- implement using the thread-local actor context
			- use it instead of createSecondaryActor(this)
		- make all events of type CustomTargetEvent (or would it complicate custom prosessing the messages? do we need to use MessageQueue<MessageToActor> for direct messages, and MessageQueue<Event<T>> for networking and stuff?)
			- make primary actors use CustomTargetEvent
			- remove duplication: unify the message processing/sending of primary and secondary actors

- end-to-end tests: running multiple test classes
	- it's not sure whether SuiteRunner works correctly when there are many test classes
	- test class inclusion patterns (*Test, Test*, some.package.*, some.package.** etc.)

- end-to-end tests: reporting test output
	- capture System.out/err
	- send out/err events
	- test: printing from the same thread to out & err should be synchronous, unlike in probably every IDE
	- hacking System.out/err
		- tests should restore the original out/err defensively in @After
		- concurrency test: out.println("O") and err.println("E") from different threads, output must not contain "OE"/"EO" but only "O\nE\n"
		- unit test: the PrintStreams for our & err must sync on the same object, testable by checking holdsLock in a mock OutputStream
			- Thread.holdsLock(java.lang.Object)
			- ReentrantLock.isHeldByCurrentThread()
		- generic test: all methods on our custom PrintStream must delegate to the PrintStream given as parameter, testable with reflection and CGLIB-proxy as target mock
			- note: can't override just selected methods, because the print's delegate to a private method, and anyways it would couple to PrintStream's implementation details
			- might break in future Java versions, if more methods are added to PrintStream, so beware of it
			! - or just use a CGLIB proxy (net.sf.cglib.proxy.MethodInterceptor which synchronizes and delegates to real PrintStream, except net.sf.cglib.proxy.NoOp for Object's methods)

- end-to-end tests: failures outside tests (in drivers and core)
	- actor tests print dummy exceptions; solve by having a custom pluggable exception handler which doesn't print stack traces of a DummyException class
	- consider a supervisor pattern for actors (like in Akka)
	- consider a command for stopping actors (Thread.interrupt(), DeathPill)

- deployment pipeline
	- install Go
	- configure CI build
	- generate unique version number for each build
	- automatic deployment to staging
	- approved deployment to Maven Central

- misc refactoring
	OK - find files which have DOS newlines and convert them to UNIX newlines
	- refactor SimpleUnit
		- simplity the tests by creating helper which runs using SuiteRunner, collects the results and provides assert methods
		- move to its own module, simpleunit
	- migrate Specsy to use Jumi (need the above test helper first)
	- packages by functionality
		core
			discovery
			drivers
			suite
			classes
			runs
		actors
			mq
	- try using FEST asserts in BuildTest, it should help with generics
	- kill daemon before removing temp files: fi.jumi.test.AppRunner#tearDown
	- SuiteRunner has a cyclic dependency with TestRunCoordinator
	- put end-to-end tests in their own package (test.fi.jumi?), separate them from unit tests
		- or use JUnit categories, maybe with a custom runner?
	- test execution might be best implemented using regular thread pools instead of actors
		- CPU bound threads should use an optimal number of threads per core
		- they take no input when running, so no actor handle needs to be created for them
		OK - the thing which coordinates a test class's workers might need to be an actor (it receives events from the tests), but it should also be able to exit itself when it has done its work
	- bullet proofing the public api, cross-references from javadocs to tests (a new xref tag?)
		- testId in onTestFinished must be correspond last onTestStarted, correctly nested
		- testId in onFailure must equal the currently running test
		- disallow TestNotifier.fireFailure and fireTestFinished after test is finished
		- log all incorrect usages to some internal log and make the suite fail?
		- TestClassListener: consider eliminating redundant parameters
	- duplicate method signatures in TestClassListener and TestClassRunnerListener
	- should SuiteRunner or TestClassRunner be responsible for filtering duplicate onTestFound events?
	- evaluate JarJar or ProGuard, maybe it could minimize the jars better than the shade plugin by removing also unused methods
		http://sonatype.github.com/jarjar-maven-plugin/
		http://pyx4me.com/pyx4me-maven-plugins/proguard-maven-plugin/

- improving TextUI
	OK - spacing between test runs (empty line or horizontal bar?)
	- option for showing all test runs or only failing
	(- if multiple readers are needed: Streamer class for receiving events from UI thread)
	- different colors for out (default), err (red), metadata e.g. test names (blue), binary output (yellow BG)?
		- JCons (uses JNI on Windows, so maybe support only Unix)
			http://jcons.sourceforge.net/
			http://sourceforge.net/projects/jcons/
		- could also JLine do it? (uses a native binary)
			http://jline.sourceforge.net/
			https://github.com/jline
		- misc links
			http://www.codeguru.com/forum/showthread.php?t=504096
			http://blogs.atlassian.com/2009/10/colour_your_console_ansicolor/
			http://en.wikipedia.org/wiki/ANSI_escape_code
			http://www.velocityreviews.com/forums/t143949-text-color-in-windows-console.html
			http://academic.evergreen.edu/projects/biophysics/technotes/program/ansi_esc.htm
			http://www.tldp.org/LDP/abs/html/colorizing.html
			http://stackoverflow.com/questions/7445658/how-to-detect-if-the-console-does-support-ansi-escape-codes-in-python
		- ANSI escape codes work in IDEA?
			http://youtrack.jetbrains.net/issue/IDEA-68679

- end-to-end tests: persistent daemon process
	- should drive better design on launcher side
	- connect to existing process
	- if daemon dies unexpectedly (System.exit/halt, JVM crash etc.), report it and restart next time
		http://vanillajava.blogspot.com/2011/12/test-complete-failure-of-jvm.html
	- make it reliable

- refactor jumi-actors-maven-plugin
	- DummyListenerToEvent: rename sender to target
	- EventToDummyListener: rename listener to target
	- @Generated annotation, example: @Generated(value = "fi.jumi.codegenerator.EventStubGenerator", comments = "Generated based on fi.jumi.codegenerator.DummyListener", date = "2000-01-01")
	- annotation to suppress unchecked warnings due to type erasure?
	- toString?
	- Externalizable? should give overall best performance without additional dependencies: https://github.com/eishay/jvm-serializers/wiki/
	- plugin pom: add-source with http://mojo.codehaus.org/build-helper-maven-plugin/
	- install plugin to local repository to avoid false alarms in jumi-core pom

- organize the project so that it's possible to run unit tests separate from end-to-end tests
	- maybe using ClasspathSuite?

- "Error creating shaded jar", probably an issue with NTFS's pending delete and the shade plugin
	- make a bug request, maybe also a patch
	http://mail-archives.apache.org/mod_mbox/maven-dev/200808.mbox/%3C835d522e0808281121g47eedd04u3c056998569be860@mail.gmail.com%3E

- investigate warnings on build:
	- happens when jumi-core-0.1.0-SNAPSHOT.jar (or daemon JAR) exists from the previous build
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TailerListener.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TailerListenerAdapter.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/TeeInputStream.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar
[WARNING] We have a duplicate net/orfjackal/jumi/core/INTERNAL/org/apache/commons/io/input/XmlStreamReader.class in C:\DEVEL\Jumi\jumi\jumi-core\target\jumi-core-0.1.0-SNAPSHOT.jar

- Pronouncing Jumi: ['jumi]
	http://en.wikipedia.org/wiki/International_Phonetic_Alphabet
