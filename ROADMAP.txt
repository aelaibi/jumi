
ROADMAP:
- Initial relase(s), technology preview
	- Runs tests on many cores
	- Custom JVM options
	- Caches library JARs
	- Make sure that test code cannot access the classes used by Jumi, except Jumi API; avoid library version conflicts using custom class loaders
	- Minimal console UI, shows only failing tests, configured using Java code
	- Debug tray GUI, shows only individual test runs (list of run IDs on left, run log on right; maybe also the test names in a tree, leftmost; print all test run data in log, but no colors or styles)
	- New runner for Specsy (Specsy 2: rewrite in Java, support more languages)
	- Publish a video demonstrating the speed. Use Dimdwarf as a sample project. Compare test run times:
		- Maven (only the test stage of the build)
		- IDEA
		- Eclipse
		- NetBeans
		- sbt (about same speed as Jumi?)
		- Jumi (1-thread, cold-start)
		- Jumi (1-thread, warm-start)
		- Jumi (4-thread, cold-start)
		- Jumi (4-thread, warm-start)

- Integration test project
	- Infrastructure for running tests against specified Jumi version
	- Tests for Specsy
	- Document and advertise it to framework developers

- Gather feedback and figure out what to build next (a proper UI perhaps; delay interaction design until here)

- Planned features:
	- Build tool, IDE and CI integration (Maven has the highest priority)
	- Well designed UI
	- Statistics (required by many other features)
	- Test priorization, run first those which will most probably fail, run fast tests first etc.
	- Per-module working directory (requires a separate JVM for each module)
	- IO/CPU boundness checking
	- Work around the issue of class loader locking the JARs (it's possible, though rare, that some JAR dependencies are generated by the same build)
	- Embed classmembersorter as a utility, in case framework developers would like to use it?
	- Faking "java.class.path", so that code which relies on it would not be disturbed by the use of multiple classloaders (should be optional and off by default?)
	- Integration with PIT mutation testing (http://pitest.org/), preferably as an optional plugin to drive the plugin API
