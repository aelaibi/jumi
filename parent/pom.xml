<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.sonatype.oss</groupId>
        <artifactId>oss-parent</artifactId>
        <version>7</version>
    </parent>

    <groupId>fi.jumi</groupId>
    <artifactId>parent</artifactId>
    <version>0.1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>parent</name>

    <description>
        Common test runner for the JVM. Natively supports running
        tests in parallel. Full stack from UI to class loading.
        Overcomes a bunch of limitations in JUnit's test runner, IDEs
        and build tools.
    </description>
    <url>http://jumi.fi</url>
    <inceptionYear>2011</inceptionYear>

    <licenses>
        <license>
            <name>Apache License 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
        </license>
    </licenses>

    <developers>
        <developer>
            <id>orfjackal</id>
            <name>Esko Luontola</name>
            <url>http://www.orfjackal.net/</url>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:git://github.com/orfjackal/jumi.git</connection>
        <url>https://github.com/orfjackal/jumi</url>
    </scm>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <minimumMavenVersion>3.0.3</minimumMavenVersion>
    </properties>

    <dependencies>

        <!-- Testing -->

        <dependency>
            <!-- Must be declared before JUnit to use hamcrest-core 1.2 instead of the 1.1 which junit-dep depends on -->
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>1.2</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit-dep</artifactId>
            <version>4.8.2</version>
            <scope>test</scope>
        </dependency>

        <!-- Mocking -->

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>1.8.5</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <dependencyManagement>
        <dependencies>

            <!-- Jumi -->

            <dependency>
                <groupId>fi.jumi</groupId>
                <artifactId>jumi-actors</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>fi.jumi</groupId>
                <artifactId>jumi-api</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>fi.jumi</groupId>
                <artifactId>jumi-core</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>fi.jumi</groupId>
                <artifactId>jumi-core</artifactId>
                <version>${project.version}</version>
                <type>test-jar</type>
            </dependency>
            <dependency>
                <groupId>fi.jumi</groupId>
                <artifactId>jumi-launcher</artifactId>
                <version>${project.version}</version>
            </dependency>

            <!-- Networking -->

            <dependency>
                <groupId>org.jboss.netty</groupId>
                <artifactId>netty</artifactId>
                <version>3.2.5.Final</version>
            </dependency>

            <!-- Misc -->

            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>2.0.1</version>
            </dependency>

            <dependency>
                <groupId>org.functionaljava</groupId>
                <artifactId>functionaljava</artifactId>
                <version>3.0</version>
            </dependency>

            <dependency>
                <groupId>com.google.code.findbugs</groupId>
                <artifactId>jsr305</artifactId>
                <version>1.3.9</version>
            </dependency>

            <!-- Maven Plugins & Code Generation -->

            <dependency>
                <groupId>org.apache.maven</groupId>
                <artifactId>maven-plugin-api</artifactId>
                <version>${minimumMavenVersion}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.maven</groupId>
                <artifactId>maven-project</artifactId>
                <version>2.2.1</version>
            </dependency>

            <!-- Bytecode Manipulation -->

            <dependency>
                <groupId>asm</groupId>
                <artifactId>asm</artifactId>
                <version>3.3.1</version>
            </dependency>
            <dependency>
                <groupId>asm</groupId>
                <artifactId>asm-all</artifactId>
                <version>3.3.1</version>
            </dependency>

            <!-- Prevent dependency on junit:junit, use only junit:junit-dep
                 (at least org.apache.maven:maven-project is affected by this) -->

            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.8.2</version>
                <scope>provided</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>

            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.8.1</version>
                <configuration>
                    <includes>
                        <include>**/*Test.class</include>
                    </includes>
                    <redirectTestOutputToFile>true</redirectTestOutputToFile>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.0.1</version>
                <executions>
                    <execution>
                        <!-- XXX: Using a different ID than in oss-parent to avoid overriding its checks by accident -->
                        <id>enforce-maven-3</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>[${minimumMavenVersion},)</version>
                                </requireMavenVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.6</version>
                <executions>
                    <execution>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <!-- XXX: workaround for an issue with maven-shade-plugin
                                     There appears to be some stale state from previous executions of the Shade plugin,
                                     which manifest themselves as "We have a duplicate" warnings on build and also
                                     as some classes not being updated on build. -->
                                <delete file="${project.build.directory}/${project.build.finalName}.${project.packaging}"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
        <pluginManagement>
            <plugins>

                <plugin>
                    <groupId>fi.jumi</groupId>
                    <artifactId>jumi-actors-maven-plugin</artifactId>
                    <version>${project.version}</version>
                </plugin>

                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>2.3.1</version>
                </plugin>

                <plugin>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>1.4</version>
                    <configuration>
                        <!-- TODO: This also minimizes jumi-core when it's included in jumi-daemon. Keep watch whether it causes problems. -->
                        <minimizeJar>true</minimizeJar>
                    </configuration>
                </plugin>

                <plugin>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>2.8.1</version>
                </plugin>

                <plugin>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>2.2</version>
                </plugin>

                <plugin>
                    <artifactId>maven-invoker-plugin</artifactId>
                    <version>1.5</version>
                </plugin>

            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <profile>
            <id>coverage-report</id>
            <build>
                <!-- XXX: All child modules must add some boilerplate to enable pitest-maven,
                     because the plugin will fail if there are no sources. Otherwise we could
                     get rid of <pluginManagement> and define the plugin here once and for all.
                     Wait for http://code.google.com/p/pitestrunner/issues/detail?id=13 to be fixed. -->
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.pitest</groupId>
                            <artifactId>pitest-maven</artifactId>
                            <version>0.24</version>
                            <executions>
                                <execution>
                                    <goals>
                                        <goal>mutationCoverage</goal>
                                    </goals>
                                </execution>
                            </executions>
                            <configuration>
                                <inScopeClasses>
                                    <param>fi.jumi.*</param>
                                </inScopeClasses>
                                <targetClasses>
                                    <param>fi.jumi.*</param>
                                </targetClasses>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>
    </profiles>

</project>
